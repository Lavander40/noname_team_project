version: '3.8'

services:
  postgre:
    image: postgres
    container_name: postgre_db
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s  
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
       - ./query/sql/pg_up_001.sql:/docker-entrypoint-initdb.d/pg_up_001.sql
       - ./query/sql/pg_up_002.sql:/docker-entrypoint-initdb.d/pg_up_002.sql
    networks:
      - net

  elastic:
    image: elasticsearch:8.10.2
    container_name: elastic_db
    env_file:
      - .env
    ports:
      - 9200:9200
    healthcheck:
      test:     
        [
          "CMD-SHELL",
          "curl -s -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'"
        ]
      interval: 1s
      timeout: 1s
      retries: 4
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      - net

  neo4j:
    image: neo4j
    container_name: neo4j
    env_file:
      - .env
    ports:
      - 7474:7474
      - 7687:7687
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 5s
      retries: 3
      start_period: 3s
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      NEO4J_server_config_strict__validation_enabled: false
    networks:
      - net

  app:
    build: .
    container_name: app
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${LOCAL_SERVICES_PORT}:4040
    depends_on:
      postgre:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      elastic:
        condition: service_healthy
    networks:
      - net

networks:
  net:
